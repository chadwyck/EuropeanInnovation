{
  "name": "stripe",
  "version": "3.6.0",
  "description": "Stripe API wrapper",
  "keywords": [
    "stripe",
    "payment processing",
    "credit cards",
    "api"
  ],
  "homepage": "https://github.com/stripe/stripe-node",
  "author": {
    "name": "Stripe",
    "email": "james@stripe.com",
    "url": "https://stripe.com/"
  },
  "contributors": [
    {
      "name": "Ask BjÃ¸rn Hansen",
      "email": "ask@develooper.com",
      "url": "http://www.askask.com/"
    },
    {
      "name": "Michelle Bu",
      "email": "michelle@stripe.com"
    },
    {
      "name": "Alex Sexton",
      "email": "alex@stripe.com"
    },
    {
      "name": "James Padolsey",
      "email": "james@stripe.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/stripe/stripe-node.git"
  },
  "bugs:": "https://github.com/stripe/stripe-node/issues",
  "engines": {
    "node": ">= v0.10.0"
  },
  "main": "lib/stripe.js",
  "devDependencies": {
    "chai": "~1.10.0",
    "chai-as-promised": "~4.1.1",
    "mocha": "~2.1.0"
  },
  "dependencies": {
    "bluebird": "^2.9.6",
    "qs": "^2.4.1",
    "lodash": "^3.1.0"
  },
  "license": "MIT",
  "scripts": {
    "test": "mocha"
  },
  "readme": "# Stripe node.js bindings [![Build Status](https://travis-ci.org/stripe/stripe-node.png?branch=master)](https://travis-ci.org/stripe/stripe-node)\n\n## Version 2 Update Notice\n\n**[Read about Version 2 here](https://github.com/stripe/stripe-node/wiki/Version-2)** (Released October 18th, 2013)\n\n## Installation\n\n`npm install stripe`\n\n## Documentation\n\nDocumentation is available at https://stripe.com/docs/api/node.\n\n## API Overview\n\nEvery resource is accessed via your `stripe` instance:\n\n```js\nvar stripe = require('stripe')(' your stripe API key ');\n// stripe.{ RESOURCE_NAME }.{ METHOD_NAME }\n```\n\nEvery resource method accepts an optional callback as the last argument:\n\n```js\nstripe.customers.create(\n  { email: 'customer@example.com' },\n  function(err, customer) {\n    err; // null if no error occurred\n    customer; // the created customer object\n  }\n);\n```\n\nAdditionally, every resource method returns a promise, so you don't have to use the regular callback. E.g.\n\n```js\n// Create a new customer and then a new charge for that customer:\nstripe.customers.create({\n  email: 'foo-customer@example.com'\n}).then(function(customer) {\n  return stripe.charges.create({\n    amount: 1600,\n    currency: 'usd',\n    customer: customer.id\n  });\n}).then(function(charge) {\n  // New charge created on a new customer\n}, function(err) {\n  // Deal with an error\n});\n```\n\nTo use the `Stripe-Account` header, simply pass an extra options hash:\n\n```js\n// Retrieve the balance for a connected account:\nstripe.balance.retrieve({\n  stripe_account: \"acct_foo\"\n}).then(function(balance) {\n  // The balance object for the connected account\n}, function(err) {\n  // Error\n});\n```\n\n### Available resources & methods\n\n*Where you see `params` it is a plain JavaScript object, e.g. `{ email: 'foo@example.com' }`*\n\n * account\n  * [`retrieve()`](https://stripe.com/docs/api/node#retrieve_account)\n * balance\n  * [`retrieve()`](https://stripe.com/docs/api/node#retrieve_balance)\n  * [`listTransactions([params])`](https://stripe.com/docs/api/node#balance_history)\n  * [`retrieveTransaction(transactionId)`](https://stripe.com/docs/api/node#retrieve_balance_transaction)\n * charges\n  * [`create(params)`](https://stripe.com/docs/api/node#create_charge)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_charges)\n  * [`retrieve(chargeId)`](https://stripe.com/docs/api/node#retrieve_charge)\n  * [`capture(chargeId[, params])`](https://stripe.com/docs/api/node#charge_capture)\n  * [`refund(chargeId[, params])`](https://stripe.com/docs/api/node#create_refund)\n  * [`update(chargeId[, params])`](https://stripe.com/docs/api/node#update_charge)\n  * [`updateDispute(chargeId[, params])`](https://stripe.com/docs/api/node#update_dispute)\n  * [`closeDispute(chargeId[, params])`](https://stripe.com/docs/api/node#close_dispute)\n  * `setMetadata(chargeId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\n  * `setMetadata(chargeId, key, value)`\n  * `getMetadata(chargeId)`\n  * `markAsSafe(chargeId)`\n  * `markAsFraudulent(chargeId)`\n * coupons\n  * [`create(params)`](https://stripe.com/docs/api/node#create_coupon)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_coupons)\n  * [`retrieve(chargeId)`](https://stripe.com/docs/api/node#retrieve_coupon)\n  * [`del(chargeId)`](https://stripe.com/docs/api/node#delete_coupon)\n * customers\n  * [`create(params)`](https://stripe.com/docs/api/node#create_customer)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_customers)\n  * [`update(customerId[, params])`](https://stripe.com/docs/api/node#update_customer)\n  * [`retrieve(customerId)`](https://stripe.com/docs/api/node#retrieve_customer)\n  * [`del(customerId)`](https://stripe.com/docs/api/node#delete_customer)\n  * `setMetadata(customerId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\n  * `setMetadata(customerId, key, value)`\n  * `getMetadata(customerId)`\n  * [`createSubscription(customerId, params)`](https://stripe.com/docs/api/node#create_subscription)\n  * [`updateSubscription(customerId, subscriptionId, [, params])`](https://stripe.com/docs/api/node#update_subscription)\n  * [`cancelSubscription(customerId, subscriptionId, [, params])`](https://stripe.com/docs/api/node#cancel_subscription)\n  * [`listSubscriptions(params)`](https://stripe.com/docs/api/node#list_subscriptions)\n  * [`createSource(customerId[, params])`](https://stripe.com/docs/api/node#create_card)\n  * [`listCards(customerId)`](https://stripe.com/docs/api/node#list_cards)\n  * [`retrieveCard(customerId, cardId)`](https://stripe.com/docs/api/node#retrieve_card)\n  * [`updateCard(customerId, cardId[, params])`](https://stripe.com/docs/api/node#update_card)\n  * [`deleteCard(customerId, cardId)`](https://stripe.com/docs/api/node#delete_card)\n  * [`deleteDiscount(customerId)`](https://stripe.com/docs/api/node#delete_discount)\n * events (*[types of events](https://stripe.com/docs/api/node#event_types)*)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_events)\n  * [`retrieve(eventId)`](https://stripe.com/docs/api/node#retrieve_event)\n * invoiceItems\n  * [`create(params)`](https://stripe.com/docs/api/node#create_invoiceitem)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_invoiceitems)\n  * [`update(invoiceItemId[, params])`](https://stripe.com/docs/api/node#update_invoiceitem)\n  * [`retrieve(invoiceItemId)`](https://stripe.com/docs/api/node#retrieve_invoiceitem)\n  * [`del(invoiceItemId)`](https://stripe.com/docs/api/node#delete_invoiceitem)\n * invoices\n  * [`create(params)`](https://stripe.com/docs/api/node#create_invoice)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_customer_invoices)\n  * [`update(invoiceId[, params])`](https://stripe.com/docs/api/node#update_invoice)\n  * [`retrieve(invoiceId)`](https://stripe.com/docs/api/node#retrieve_invoice)\n  * [`retrieveLines(invoiceId)`](https://stripe.com/docs/api/node#invoice_lines)\n  * [`retrieveUpcoming(customerId[, params])`](https://stripe.com/docs/api/node#retrieve_customer_invoice)\n  * [`pay(invoiceId)`](https://stripe.com/docs/api/node#pay_invoice)\n * plans\n  * [`create(params)`](https://stripe.com/docs/api/node#create_plan)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_plans)\n  * [`update(planId[, params])`](https://stripe.com/docs/api/node#update_plan)\n  * [`retrieve(planId)`](https://stripe.com/docs/api/node#retrieve_plan)\n  * [`del(planId)`](https://stripe.com/docs/api/node#delete_plan)\n * recipients\n  * [`create(params)`](https://stripe.com/docs/api/node#create_recipient)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_recipients)\n  * [`update(recipientId[, params])`](https://stripe.com/docs/api/node#update_recipient)\n  * [`retrieve(recipientId)`](https://stripe.com/docs/api/node#retrieve_recipient)\n  * [`del(recipientId)`](https://stripe.com/docs/api/node#delete_recipient)\n  * `setMetadata(recipientId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\n  * `setMetadata(recipientId, key, value)`\n  * `getMetadata(recipientId)`\n * tokens\n  * [`create(params)`](https://stripe.com/docs/api/node#create_card_token)\n  * [`retrieve(tokenId)`](https://stripe.com/docs/api/node#retrieve_token)\n * transfers\n  * [`create(params)`](https://stripe.com/docs/api/node#create_transfer)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_transfers)\n  * [`retrieve(transferId)`](https://stripe.com/docs/api/node#retrieve_transfer)\n  * [`update(transferId[, params])`](https://stripe.com/docs/api/node#update_transfer)\n  * [`reverse(transferId[, params])`](https://stripe.com/docs/api/node#create_transfer_reversal)\n  * `cancel(transferId)` (Deprecated -- use `reverse`)\n  * [`listTransactions(transferId[, params])`](https://stripe.com/docs/api/curl#list_transfers)\n  * `setMetadata(transferId, metadataObject)` ([metadata info](https://stripe.com/docs/api/node#metadata))\n  * `setMetadata(transferId, key, value)`\n  * `getMetadata(transferId)`\n * bitcoinReceivers\n  * [`create(params)`](https://stripe.com/docs/api/node#create_bitcoin_receiver)\n  * [`retrieve(receiverId)`](https://stripe.com/docs/api/node#retrieve_bitcoin_receiver)\n  * [`list([params])`](https://stripe.com/docs/api/node#list_bitcoin_receivers)\n  * `getMetadata(receiverId)`\n\n## Configuration\n\n * `stripe.setApiKey(' your secret api key ');`\n * `stripe.setTimeout(20000); // in ms` (default is node's default: `120000ms`)\n\n## More information / wikis\n\n * **[In-depth Documentation](https://stripe.com/docs/api/node)**\n * [Version 2 Overview](https://github.com/stripe/stripe-node/wiki/Version-2)\n * [REST API Version](https://github.com/stripe/stripe-node/wiki/REST-API-Version)\n * [Error Handling](https://github.com/stripe/stripe-node/wiki/Error-Handling)\n * [Using Stripe Connect](https://github.com/stripe/stripe-node/wiki/Using-Stripe-Connect-with-node.js)\n\n## Development\n\nTo run the tests you'll need a Stripe *Test* API key (from your [Stripe Dashboard](https://manage.stripe.com)):\n\n```bash\n$ npm install -g mocha\n$ npm test\n```\n\n*Note: On Windows use `SET` instead of `export` for setting the `STRIPE_TEST_API_KEY` environment variable.*\n\nIf you don't have a prefixed key (in the form `sk_test_...`) you can get one by rolling your \"Test Secret Key\". This can be done under your dashboard (*Account Setting -> API Keys -> Click the roll icon next to the \"test secret key\"*). This should give you a new prefixed key ('sk_test_..'), which will then be usable by the node mocha tests.\n\n## Author\n\nOriginally by [Ask BjÃ¸rn Hansen](https://github.com/abh) (ask@develooper.com). Development was sponsored by YellowBot. Now officially maintained by Stripe.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/stripe/stripe-node/issues"
  },
  "_id": "stripe@3.6.0",
  "dist": {
    "shasum": "84dc10e376b045f2a8107d467bc3689d36808b92"
  },
  "_from": "stripe@3.6.0",
  "_resolved": "https://registry.npmjs.org/stripe/-/stripe-3.6.0.tgz"
}
