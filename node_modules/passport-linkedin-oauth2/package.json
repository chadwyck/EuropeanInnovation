{
  "name": "passport-linkedin-oauth2",
  "version": "1.2.1",
  "description": "Passport for LinkedIn Oauth2",
  "main": "./lib",
  "repository": {
    "type": "git",
    "url": "https://github.com/auth0/passport-linkedin-oauth2"
  },
  "scripts": {
    "test": "mocha --require should -t 5000"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "~1.2.1",
    "passport": "~0.1.17",
    "express": "~3.4.4",
    "ejs": "~0.8.4"
  },
  "keywords": [
    "passport",
    "linkedin",
    "auth0"
  ],
  "author": {
    "name": "Auth0"
  },
  "contributors": [
    {
      "name": "Eugenio Pace",
      "email": "eugenio.pace@qraftlabs.com"
    },
    {
      "name": "Joshua Schell",
      "email": "jschell12@gmail.com"
    },
    {
      "name": "Jose Romaniello",
      "email": "jfromaniello@gmail.com"
    },
    {
      "name": "Tom Spencer",
      "email": "fiznool@gmail.com"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "passport-oauth2": "^1.1.2",
    "underscore": "^1.7.0"
  },
  "readme": "A simple [Passport](http://passportjs.org/) strategy for LinkedIn OAuth2.\n\n## Install\n\n  npm install passport-linkedin-oauth2\n\n## Usage\n\nRegister the strategy\n\n~~~javascript\nvar LinkedInStrategy = require('passport-linkedin-oauth2').Strategy;\n\npassport.use(new LinkedInStrategy({\n  clientID: LINKEDIN_KEY,\n  clientSecret: LINKEDIN_SECRET,\n  callbackURL: \"http://127.0.0.1:3000/auth/linkedin/callback\",\n  scope: ['r_emailaddress', 'r_basicprofile'],\n}, function(accessToken, refreshToken, profile, done) {\n  // asynchronous verification, for effect...\n  process.nextTick(function () {\n    // To keep the example simple, the user's LinkedIn profile is returned to\n    // represent the logged-in user. In a typical application, you would want\n    // to associate the LinkedIn account with a user record in your database,\n    // and return that user instead.\n    return done(null, profile);\n  });\n}));\n~~~\n\nand then authenticate as:\n\n~~~javascript\napp.get('/auth/linkedin',\n  passport.authenticate('linkedin', { state: 'SOME STATE'  }),\n  function(req, res){\n    // The request will be redirected to LinkedIn for authentication, so this\n    // function will not be called.\n  });\n~~~\n\nthe login callback:\n\n~~~javascript\napp.get('/auth/linkedin/callback', passport.authenticate('linkedin', {\n  successRedirect: '/',\n  failureRedirect: '/login'\n}));\n~~~\n\nSee [this](http://developer.linkedin.com/) for details on LinkedIn API.\n\n## Auto-handle `state` param\n\nThe `state` param is used to prevent CSRF attacks, and is [required by the LinkedIn API](https://developer.linkedin.com/documents/authentication). You can ask Passport to handle the sending and validating of the `state` parameter by passing `state: true` as an option to the strategy:\n\n~~~javascript\nvar LinkedInStrategy = require('passport-linkedin-oauth2').Strategy;\n\npassport.use(new LinkedInStrategy({\n  clientID: LINKEDIN_KEY,\n  clientSecret: LINKEDIN_SECRET,\n  callbackURL: \"http://127.0.0.1:3000/auth/linkedin/callback\",\n  scope: ['r_emailaddress', 'r_basicprofile'],\n  state: true\n}, function(accessToken, refreshToken, profile, done) {\n  // asynchronous verification, for effect...\n  process.nextTick(function () {\n    // To keep the example simple, the user's LinkedIn profile is returned to\n    // represent the logged-in user. In a typical application, you would want\n    // to associate the LinkedIn account with a user record in your database,\n    // and return that user instead.\n    return done(null, profile);\n  });\n}));\n~~~\n\nand then authenticate as:\n\n~~~javascript\napp.get('/auth/linkedin',\n  passport.authenticate('linkedin'),\n  function(req, res){\n    // The request will be redirected to LinkedIn for authentication, so this\n    // function will not be called.\n  });\n~~~\n\n## License\n\nMIT - 2014 - AUTH0\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/auth0/passport-linkedin-oauth2/issues"
  },
  "_id": "passport-linkedin-oauth2@1.2.1",
  "dist": {
    "shasum": "dc1dcd7a05f5a3c36afdddda49847fbcca71f97b"
  },
  "_from": "passport-linkedin-oauth2@1.2.1",
  "_resolved": "https://registry.npmjs.org/passport-linkedin-oauth2/-/passport-linkedin-oauth2-1.2.1.tgz"
}
