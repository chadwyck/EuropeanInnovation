{
  "author": {
    "name": "Tumblr"
  },
  "contributors": [
    {
      "name": "Bryan Irace",
      "email": "bryan.irace@gmail.com"
    },
    {
      "name": "John Crepezzi",
      "email": "john.crepezzi@gmail.com"
    }
  ],
  "name": "tumblr.js",
  "description": "Official JavaScript client for the Tumblr API",
  "homepage": "https://github.com/tumblr/tumblr.js",
  "version": "0.0.5",
  "repository": {
    "url": "https://github.com/tumblr/tumblr.js"
  },
  "browserify": "browser/index.js",
  "bin": {
    "tumblr": "./bin/repl.js"
  },
  "main": "./index",
  "dependencies": {
    "request": "2.12.0"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "jscoverage": "*",
    "jsl": "*"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "mocha -r should test/*_spec.js"
  },
  "readme": "# tumblr.js\n\n[![Build Status](https://secure.travis-ci.org/tumblr/tumblr.js.png)](http://travis-ci.org/tumblr/tumblr.js)\n\nJavaScript client library for the\n[Tumblr API](http://www.tumblr.com/docs/en/api/v2) /\nnpm: https://npmjs.org/package/tumblr.js\n\n## Create a Client\n\n``` javascript\nvar tumblr = require('tumblr.js');\nvar client = tumblr.createClient({\n  consumer_key: '<consumer key>',\n  consumer_secret: '<consumer secret>',\n  token: '<oauth token>',\n  token_secret: '<oauth token secret>'\n});\n```\n\nOr, if you prefer:\n\n``` javascript\nvar tumblr = require('tumblr.js');\nvar client = new tumblr.Client({\n\t// ...\n});\n```\n\n## Example\n\n``` javascript\n// Show user's blog names\nclient.userInfo(function (err, data) {\n\tdata.user.blogs.forEach(function (blog) {\n\t\tconsole.log(blog.name);\n\t});\n});\n```\n\n## Supported Methods\n\nBelow is a list of available methods and their purpose.  Available options\nare documented on http://www.tumblr.com/docs/en/api/v2 and are specified as\na JavaScript object, for example:\n\n``` javascript\nclient.posts('seejohnrun', { type: 'photo' }, function (err, resp) {\n  resp.posts; // use them for something\n});\n```\n\nIn most cases, since options are optional (heh) they are also an optional\nargument, so there is no need to pass an empty object when supplying no options,\nlike:\n\n``` javascript\nclient.posts('seejohnrun', function (err, resp) {\n  resp.posts; // now we've got all kinds of posts\n});\n```\n\n\n### User Methods\n\n``` javascript\n// Get information about the authenticating user & their blogs\nclient.userInfo(callback);\n\n// Get dashboard for authenticating user\nclient.dashboard(options, callback);\nclient.dashboard(callback);\n\n// Get likes for authenticating user\nclient.likes(options, callback);\nclient.likes(callback);\n\n// Get followings for authenticating user\nclient.following(options, callback);\nclient.following(callback);\n\n// Follow or unfollow a given blog\nclient.follow(blogURL, callback);\nclient.unfollow(blogURL, callback);\n\n// Like or unlike a given post\nclient.like(id, reblogKey, callback);\nclient.unlike(id, reblogKey, callback);\n```\n\n### Blog Methods\n\n``` javascript\n// Get information about a given blog\nclient.blogInfo(blogName, callback);\n\n// Get a list of posts for a blog (with optional filtering)\nclient.posts(blogName, options, callback);\nclient.posts(blogName, callback);\n\n// Get the avatar URL for a blog\nclient.avatar(blogName, size, callback);\nclient.avatar(blogName, callback);\n\n// Get the likes for a blog\nclient.blogLikes(blogName, options, callback);\nclient.blogLikes(blogName, callback);\n\n// Get the followers for a blog\nclient.followers(blogName, options, callback);\nclient.followers(blogName, callback);\n\n// Get the queue for a blog\nclient.queue(blogName, options, callback);\nclient.queue(blogName, callback);\n\n// Get the drafts for a blog\nclient.drafts(blogName, options, callback);\nclient.drafts(blogName, callback);\n\n// Get the submissions for a blog\nclient.submissions(blogName, options, callback);\nclient.submissions(blogName, callback);\n```\n\n### Post Methods\n\n``` javascript\n// Edit a given post\nclient.edit(blogName, options, callback);\n\n// Reblog a given post\nclient.reblog(blogName, options, callback);\n\n// Delete a given psot\nclient.deletePost(blogName, id, callback);\n\n// Convenience methods for creating post types\nclient.photo(blogName, options, callback);\nclient.quote(blogName, options, callback);\nclient.text(blogName, options, callback);\nclient.link(blogName, options, callback);\nclient.chat(blogName, options, callback);\nclient.audio(blogName, options, callback);\nclient.video(blogName, options, callback);\n```\n\n### Tagged Methods\n\n``` javascript\n// View posts tagged with a certain tag\nclient.tagged(tag, options, callback);\nclient.tagged(tag, callback);\n```\n\n---\n\n## Running tests\n\n``` bash\nmake # run tests\nmake coverage # run coverage report\n```\n\n# Copyright and license\n\nCopyright 2013 Tumblr, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not\nuse this work except in compliance with the License. You may obtain a copy of\nthe License in the LICENSE file, or at:\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\nLicense for the specific language governing permissions and limitations.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tumblr/tumblr.js/issues"
  },
  "_id": "tumblr.js@0.0.5",
  "dist": {
    "shasum": "644dc6cf5231445aef133c1055a7413a7f16affc"
  },
  "_from": "tumblr.js@0.0.5",
  "_resolved": "https://registry.npmjs.org/tumblr.js/-/tumblr.js-0.0.5.tgz"
}
