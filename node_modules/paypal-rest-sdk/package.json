{
  "author": {
    "name": "PayPal",
    "email": "DL-PP-NODEJS-SDK@ebay.com",
    "url": "https://developer.paypal.com/"
  },
  "name": "paypal-rest-sdk",
  "description": "SDK for PayPal REST APIs",
  "version": "1.6.0",
  "homepage": "https://github.com/paypal/PayPal-node-SDK",
  "keywords": [
    "paypal",
    "rest",
    "api",
    "sdk"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/paypal/PayPal-node-SDK.git"
  },
  "bugs": {
    "url": "https://github.com/paypal/PayPal-node-SDK/issues",
    "email": "DL-PP-NODEJS-SDK@ebay.com"
  },
  "licenses": [
    {
      "type": "Custom",
      "url": "https://github.com/paypal/PayPal-node-SDK/blob/master/LICENSE.txt"
    }
  ],
  "engines": {
    "node": ">= v0.6.0"
  },
  "main": "./index.js",
  "dependencies": {
    "buffer-crc32": "^0.2.3",
    "node-uuid": "~1.4.1"
  },
  "devDependencies": {
    "blanket": "~1.1.5",
    "chai": "~1.9.1",
    "coveralls": "~2.0.16",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.3.0",
    "grunt-jsdoc": "^0.5.8",
    "grunt-simple-mocha": "~0.4.0",
    "ink-docstrap": "^0.5.2",
    "jsdoc": "^3.3.0-beta1",
    "mocha": "~1.18.2",
    "mocha-lcov-reporter": "0.0.1",
    "nock": "0.36.2"
  },
  "config": {
    "blanket": {
      "pattern": "lib",
      "data-cover-never": "node_modules"
    }
  },
  "scripts": {
    "test": "grunt"
  },
  "readmeFilename": "README.md",
  "man": [
    "README.md"
  ],
  "readme": "# PayPal REST SDK\n\nContinuous integration status:\n\n[![Build Status](https://travis-ci.org/paypal/PayPal-node-SDK.png?branch=master)](https://travis-ci.org/paypal/PayPal-node-SDK) [![Coverage Status](https://coveralls.io/repos/paypal/PayPal-node-SDK/badge.png?branch=master)](https://coveralls.io/r/paypal/PayPal-node-SDK?branch=master) \n\nNPM status:\n\n[![NPM version](https://badge.fury.io/js/paypal-rest-sdk.png)](http://badge.fury.io/js/paypal-rest-sdk)\n[![Dependency Status](https://david-dm.org/paypal/PayPal-node-SDK.png)](https://david-dm.org/paypal/PayPal-node-SDK)\n\nRepository for PayPal's Node SDK (node.js version >=0.6.x) and Node samples for REST API. For a full working app and documentation, have a look at the [PayPal Node SDK Page](http://paypal.github.io/PayPal-node-SDK/).\n\n> **v1.0.0 notice**: If upgrading from paypal rest sdk 0.*, Please view Breaking Changes in release_notes.md\n\n> **Before starting to use the sdk, please be aware of the [existing issues and currently unavailable or upcoming features](https://github.com/paypal/PayPal-Python-SDK/wiki/Existing-Issues-and-Unavailable%5CUpcoming-features) for the REST APIs. (which the sdks are based on)** \n\n## Installation\n\n```sh\nnpm install paypal-rest-sdk\n```\n\n## Usage\nTo write an app using the SDK\n\n  * Register for a developer account and get your client_id and secret at [PayPal Developer Portal](https://developer.paypal.com).\n  * Add dependency 'paypal-rest-sdk' in your package.json file.\n  * Require 'paypal-rest-sdk' in your file\n\n    ```js\n    var paypal = require('paypal-rest-sdk');\n    ```\n  * Create config options, with parameters (mode, client_id, secret).\n\n    ```js\n    paypal.configure({\n      'mode': 'sandbox', //sandbox or live\n      'client_id': 'EBWKjlELKMYqRNQ6sYvFo64FtaRLRR5BdHEESmha49TM',\n      'client_secret': 'EO422dn3gQLgDbuwqTjzrFgFtaRLRR5BdHEESmha49TM'\n    });\n    ```\n  * For multiple configuration support, have a look at the [sample](/samples/configuration/multiple_config.js)\n  * Invoke the rest api (eg: store a credit card) with required parameters (eg: data, config_options, callback).\n\n    ```js\n    var card_data = {\n      \"type\": \"visa\",\n      \"number\": \"4417119669820331\",\n      \"expire_month\": \"11\",\n      \"expire_year\": \"2018\",\n      \"cvv2\": \"123\",\n      \"first_name\": \"Joe\",\n      \"last_name\": \"Shopper\"\n    };\n\n    paypal.creditCard.create(card_data, function(error, credit_card){\n      if (error) {\n        console.log(error);\n        throw error;\n      } else {\n        console.log(\"Create Credit-Card Response\");\n        console.log(credit_card);\n      }\n    })\n    ```\n\n  * For creating [Subscription Payments](https://developer.paypal.com/docs/integration/direct/create-billing-plan/), check out the [samples](/samples/subscription) for creating planned sets of future recurring payments at periodic intervals.\n\n  * To create [Future Payments](https://developer.paypal.com/docs/integration/mobile/make-future-payment/), check out this [sample](/samples/payment/create_future_payment.js) for executing future payments for a customer who has granted consent on a mobile device.\n\n  * For [exploring additional payment capabilites](https://developer.paypal.com/docs/integration/direct/explore-payment-capabilities/), such as handling discounts, insurance, soft_descriptor and invoice_number, have a look at this [example](/samples/payment/create_with_paypal_further_capabilities.js). These bring REST payment functionality closer to parity with older Merchant APIs.\n\n  * Customizing a [PayPal payment experience](https://developer.paypal.com/webapps/developer/docs/integration/direct/rest-experience-overview/) is available as of version 1.1.0 enabling merchants to provide a customized experience to consumers from the merchantâ€™s website to the PayPal payment. Get started with the [supported rest methods](https://developer.paypal.com/webapps/developer/docs/api/#payment-experience) and [samples](/samples/payment_experience/web_profile).\n\n  * For creating and managing [Orders](https://developer.paypal.com/webapps/developer/docs/integration/direct/create-process-order/#create-the-order), i.e. getting consent from buyer for a purchase but only placing the funds on hold when the merchant is ready to fulfill the [order](https://developer.paypal.com/webapps/developer/docs/api/#orders), have a look at [samples](/samples/order).\n\n  * For creating [batch and single payouts](https://developer.paypal.com/webapps/developer/docs/integration/direct/payouts-overview/), check out the samples for [payouts](/samples/payout) and [payout items](/samples/payout_item). The [Payouts feature](https://developer.paypal.com/webapps/developer/docs/api/#payouts) enables you to make PayPal payments to multiple PayPal accounts in a single API call.\n\n  * For [Invoicing](https://developer.paypal.com/webapps/developer/docs/api/#invoicing), check out the [samples](/samples/invoice/) to see how you can use the node sdk to create, send and manage invoices.\n\n  * To receive [notifications from PayPal about Payment events](https://developer.paypal.com/webapps/developer/docs/api/#notifications) on your server, webhook support is now available as of version 1.2.0. For creating and managing [Webhook and Webhook Events](https://developer.paypal.com/webapps/developer/docs/integration/direct/rest-webhooks-overview/), check out the [samples](/samples/notifications/) to see how you can use the node sdk to manage webhooks, webhook events and [verify](/samples/notifications/webhook-events/webhook_payload_verify.js) that the response unaltered and is really from PayPal. Since 1.6.0, it is highly recommended to use [getAndVerify](/samples/notifications/webhook-events/get_and_verify.js) to verify the authenticity of webhook messages. It is also important to note that simulated messages generated using the [Webhook simulator](https://developer.paypal.com/developer/webhooksSimulator) would not be compatible with the verification process since they are only mock data.\n\n  * To use OpenID Connect\n\n    ```js\n    // OpenID configuration\n    paypal.configure({\n      'openid_client_id': 'CLIENT_ID',\n      'openid_client_secret': 'CLIENT_SECRET',\n      'openid_redirect_uri': 'http://example.com' });\n\n    // Authorize url\n    paypal.openIdConnect.authorizeUrl({'scope': 'openid profile'});\n\n    // Get tokeninfo with Authorize code\n    paypal.openIdConnect.tokeninfo.create(\"Replace with authorize code\", function(error, tokeninfo){\n      console.log(tokeninfo);\n    });\n\n    // Get tokeninfo with Refresh code\n    paypal.openIdConnect.tokeninfo.refresh(\"Replace with refresh_token\", function(error, tokeninfo){\n      console.log(tokeninfo);\n    });\n\n    // Get userinfo with Access code\n    paypal.openIdConnect.userinfo.get(\"Replace with access_code\", function(error, userinfo){\n      console.log(userinfo);\n    });\n\n    // Logout url\n    paypal.openIdConnect.logoutUrl(\"Replace with tokeninfo.id_token\");\n    ```\n\n## Running Samples\nInstructions for running samples are located in the [sample directory](/samples). Try these samples in a live sandbox environment:\n\n<a href=\"http://runnable.com/paypal\" target=\"_blank\"><img src=\"http://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Running Tests\nTo run the test suite first invoke the following command within the repo\n\nIf mocha is not installed\n```sh\nnpm install -g mocha\n```\nand then to install the development dependencies:\n```sh\nnpm install\n```\nthen run the tests:\n```sh\ngrunt test (timeout is specified in milliseconds eg: 15000ms)\n```\n\n## Debugging\n\n   * It is recommended to provide Paypal-Debug-Id if requesting PayPal Merchant Technical Services for support. You can get access to the debug id by setting environment variable NODE_ENV=development.\n   * The error object returned for any bad request has error.response populated with [details](https://developer.paypal.com/webapps/developer/docs/api/#errors). NODE_ENV=development setting also gives you access to stringfied response in error messages.\n\n## Reference\n   [REST API Reference] (https://developer.paypal.com/webapps/developer/docs/api/)\n\n## Contribution\n   * If you would like to contribute, please fork the repo and send in a pull request.\n   * Please ensure you run grunt before sending in the pull request.\n",
  "_id": "paypal-rest-sdk@1.6.0",
  "dist": {
    "shasum": "d869c05537c07f2bf1fd133e071e9500dbe32dfe"
  },
  "_from": "paypal-rest-sdk@1.6.0",
  "_resolved": "https://registry.npmjs.org/paypal-rest-sdk/-/paypal-rest-sdk-1.6.0.tgz"
}
